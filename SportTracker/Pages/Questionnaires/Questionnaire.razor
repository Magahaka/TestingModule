@page "/questionnaires"

@inject NavigationManager navManager
@inject QuestionnaireService questionnaireService
@inject IHttpContextAccessor HttpContextAccessor

@using SportTracker.Mappings.Questionnaires;
@using System.Reflection;
@using SportTracker.Mappings.Questionnaires.Create;
@using SportTracker.Services;
@using System.Security.Claims
@using Microsoft.AspNetCore.Http;
@using SportTracker.Mappings.Questionnaires.Update;
@using SportTracker.Pages.Questionnaires;

<h3>Questionnaire</h3>

<label class="button" for="file-material-upload" @onclick="() => NavigateToSurveyForm()">Create Questionnaire</label>

@if (questionnaires != null && questionnaires.Questionnaires.Any())
{
    for (int i = 0; i < questionnaires.Questionnaires.Count; i++)
    {
        int counter = i;
        <div>
            <button style="width: 200px; height: 50px" @onclick="() => { show = !show; selectedId = counter; }">@questionnaires.Questionnaires[counter].Name</button>
            @if (show && selectedId == counter)
            {
                <div style="margin: 20px;">
                    <QuestionnaireForm questionnaireId="questionnaires.Questionnaires[counter].Id" />
                </div>
            }
        </div>
    }
}

@code {
    QuestionnaireListViewModel questionnaires;
    string userId;
    bool show;
    int? selectedId;

    protected override async Task OnInitializedAsync()
    {
        await loadUser();
        await load();
    }

    protected async Task load()
    {
        questionnaires = await questionnaireService.GetQuestionnairesAsync(userId, false);
    }

    protected async Task NavigateToSurveyForm()
    {
        navManager.NavigateTo("/questionnaireform");
    }

    protected async Task loadUser()
    {
        userId = loadUserInformation();
    }

    protected string loadUserInformation()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        return principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }
}
